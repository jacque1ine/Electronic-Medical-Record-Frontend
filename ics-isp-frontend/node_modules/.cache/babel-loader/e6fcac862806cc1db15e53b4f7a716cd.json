{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.includes.js\";\n// Composables\nimport { useProxiedModel } from \"./proxiedModel.mjs\"; // Utilities\n\nimport { computed, inject, onBeforeUnmount, onMounted, provide, reactive, toRef, watch } from 'vue';\nimport { consoleWarn, deepEqual, findChildrenWithProvide, getCurrentInstance, getUid, propsFactory, wrapInArray } from \"../util/index.mjs\"; // Types\n\nexport const makeGroupProps = propsFactory({\n  modelValue: {\n    type: null,\n    default: undefined\n  },\n  multiple: Boolean,\n  mandatory: [Boolean, String],\n  max: Number,\n  selectedClass: String,\n  disabled: Boolean\n}, 'group');\nexport const makeGroupItemProps = propsFactory({\n  value: null,\n  disabled: Boolean,\n  selectedClass: String\n}, 'group-item');\nexport function useGroupItem(props, injectKey) {\n  let required = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const vm = getCurrentInstance('useGroupItem');\n\n  if (!vm) {\n    throw new Error('[Vuetify] useGroupItem composable must be used inside a component setup function');\n  }\n\n  const id = getUid();\n  provide(Symbol.for(`${injectKey.description}:id`), id);\n  const group = inject(injectKey, null);\n\n  if (!group) {\n    if (!required) return group;\n    throw new Error(`[Vuetify] Could not find useGroup injection with symbol ${injectKey.description}`);\n  }\n\n  const value = toRef(props, 'value');\n  const disabled = computed(() => group.disabled.value || props.disabled);\n  group.register({\n    id,\n    value,\n    disabled\n  }, vm);\n  onBeforeUnmount(() => {\n    group.unregister(id);\n  });\n  const isSelected = computed(() => {\n    return group.isSelected(id);\n  });\n  const selectedClass = computed(() => isSelected.value && [group.selectedClass.value, props.selectedClass]);\n  watch(isSelected, value => {\n    vm.emit('group:selected', {\n      value\n    });\n  });\n  return {\n    id,\n    isSelected,\n    toggle: () => group.select(id, !isSelected.value),\n    select: value => group.select(id, value),\n    selectedClass,\n    value,\n    disabled,\n    group\n  };\n}\nexport function useGroup(props, injectKey) {\n  let isUnmounted = false;\n  const items = reactive([]);\n  const selected = useProxiedModel(props, 'modelValue', [], v => {\n    if (v == null) return [];\n    return getIds(items, wrapInArray(v));\n  }, v => {\n    const arr = getValues(items, v);\n    return props.multiple ? arr : arr[0];\n  });\n  const groupVm = getCurrentInstance('useGroup');\n\n  function register(item, vm) {\n    // Is there a better way to fix this typing?\n    const unwrapped = item;\n    const key = Symbol.for(`${injectKey.description}:id`);\n    const children = findChildrenWithProvide(key, groupVm == null ? void 0 : groupVm.vnode);\n    const index = children.indexOf(vm);\n\n    if (index > -1) {\n      items.splice(index, 0, unwrapped);\n    } else {\n      items.push(unwrapped);\n    }\n  }\n\n  function unregister(id) {\n    if (isUnmounted) return; // TODO: re-evaluate this line's importance in the future\n    // should we only modify the model if mandatory is set.\n    // selected.value = selected.value.filter(v => v !== id)\n\n    forceMandatoryValue();\n    const index = items.findIndex(item => item.id === id);\n    items.splice(index, 1);\n  } // If mandatory and nothing is selected, then select first non-disabled item\n\n\n  function forceMandatoryValue() {\n    const item = items.find(item => !item.disabled);\n\n    if (item && props.mandatory === 'force' && !selected.value.length) {\n      selected.value = [item.id];\n    }\n  }\n\n  onMounted(() => {\n    forceMandatoryValue();\n  });\n  onBeforeUnmount(() => {\n    isUnmounted = true;\n  });\n\n  function select(id, value) {\n    const item = items.find(item => item.id === id);\n    if (value && item != null && item.disabled) return;\n\n    if (props.multiple) {\n      var _value;\n\n      const internalValue = selected.value.slice();\n      const index = internalValue.findIndex(v => v === id);\n      const isSelected = ~index;\n      value = (_value = value) != null ? _value : !isSelected; // We can't remove value if group is\n      // mandatory, value already exists,\n      // and it is the only value\n\n      if (isSelected && props.mandatory && internalValue.length <= 1) return; // We can't add value if it would\n      // cause max limit to be exceeded\n\n      if (!isSelected && props.max != null && internalValue.length + 1 > props.max) return;\n      if (index < 0 && value) internalValue.push(id);else if (index >= 0 && !value) internalValue.splice(index, 1);\n      selected.value = internalValue;\n    } else {\n      var _value2;\n\n      const isSelected = selected.value.includes(id);\n      if (props.mandatory && isSelected) return;\n      selected.value = ((_value2 = value) != null ? _value2 : !isSelected) ? [id] : [];\n    }\n  }\n\n  function step(offset) {\n    // getting an offset from selected value obviously won't work with multiple values\n    if (props.multiple) consoleWarn('This method is not supported when using \"multiple\" prop');\n\n    if (!selected.value.length) {\n      const item = items.find(item => !item.disabled);\n      item && (selected.value = [item.id]);\n    } else {\n      const currentId = selected.value[0];\n      const currentIndex = items.findIndex(i => i.id === currentId);\n      let newIndex = (currentIndex + offset) % items.length;\n      let newItem = items[newIndex];\n\n      while (newItem.disabled && newIndex !== currentIndex) {\n        newIndex = (newIndex + offset) % items.length;\n        newItem = items[newIndex];\n      }\n\n      if (newItem.disabled) return;\n      selected.value = [items[newIndex].id];\n    }\n  }\n\n  const state = {\n    register,\n    unregister,\n    selected,\n    select,\n    disabled: toRef(props, 'disabled'),\n    prev: () => step(items.length - 1),\n    next: () => step(1),\n    isSelected: id => selected.value.includes(id),\n    selectedClass: computed(() => props.selectedClass),\n    items: computed(() => items),\n    getItemIndex: value => getItemIndex(items, value)\n  };\n  provide(injectKey, state);\n  return state;\n}\n\nfunction getItemIndex(items, value) {\n  const ids = getIds(items, [value]);\n  if (!ids.length) return -1;\n  return items.findIndex(item => item.id === ids[0]);\n}\n\nfunction getIds(items, modelValue) {\n  const ids = [];\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n\n    if (item.value != null) {\n      if (modelValue.find(value => deepEqual(value, item.value)) != null) {\n        ids.push(item.id);\n      }\n    } else if (modelValue.includes(i)) {\n      ids.push(item.id);\n    }\n  }\n\n  return ids;\n}\n\nfunction getValues(items, ids) {\n  const values = [];\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n\n    if (ids.includes(item.id)) {\n      values.push(item.value != null ? item.value : i);\n    }\n  }\n\n  return values;\n}","map":{"version":3,"mappings":"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","names":["useProxiedModel","computed","inject","onBeforeUnmount","onMounted","provide","reactive","toRef","watch","consoleWarn","deepEqual","findChildrenWithProvide","getCurrentInstance","getUid","propsFactory","wrapInArray","makeGroupProps","modelValue","type","default","undefined","multiple","Boolean","mandatory","String","max","Number","selectedClass","disabled","makeGroupItemProps","value","useGroupItem","props","injectKey","required","vm","Error","id","Symbol","for","description","group","register","unregister","isSelected","emit","toggle","select","useGroup","isUnmounted","items","selected","v","getIds","arr","getValues","groupVm","item","unwrapped","key","children","vnode","index","indexOf","splice","push","forceMandatoryValue","findIndex","find","length","internalValue","slice","includes","step","offset","currentId","currentIndex","i","newIndex","newItem","state","prev","next","getItemIndex","ids","values"],"sources":["../../src/composables/group.ts"],"sourcesContent":["// Composables\nimport { useProxiedModel } from './proxiedModel'\n\n// Utilities\nimport { computed, inject, onBeforeUnmount, onMounted, provide, reactive, toRef, watch } from 'vue'\nimport { consoleWarn, deepEqual, findChildrenWithProvide, getCurrentInstance, getUid, propsFactory, wrapInArray } from '@/util'\n\n// Types\nimport type { ComponentInternalInstance, ComputedRef, ExtractPropTypes, InjectionKey, PropType, Ref, UnwrapRef } from 'vue'\n\nexport interface GroupItem {\n  id: number\n  value: Ref<unknown>\n  disabled: Ref<boolean | undefined>\n}\n\nexport interface GroupProps {\n  disabled: boolean\n  modelValue: unknown\n  multiple?: boolean\n  mandatory?: boolean | 'force' | undefined\n  max?: number | undefined\n  selectedClass: string | undefined\n  'onUpdate:modelValue': ((val: unknown) => void) | undefined\n}\n\nexport interface GroupProvide {\n  register: (item: GroupItem, cmp: ComponentInternalInstance) => void\n  unregister: (id: number) => void\n  select: (id: number, value: boolean) => void\n  selected: Ref<any[]>\n  isSelected: (id: number) => boolean\n  prev: () => void\n  next: () => void\n  selectedClass: Ref<string | undefined>\n  items: ComputedRef<{\n    id: number\n    value: unknown\n    disabled: boolean | undefined\n  }[]>\n  disabled: Ref<boolean | undefined>\n  getItemIndex: (value: unknown) => number\n}\n\nexport interface GroupItemProvide {\n  id: number\n  isSelected: Ref<boolean>\n  toggle: () => void\n  select: (value: boolean) => void\n  selectedClass: Ref<(string | undefined)[] | false>\n  value: Ref<unknown>\n  disabled: Ref<boolean | undefined>\n  group: GroupProvide\n}\n\nexport const makeGroupProps = propsFactory({\n  modelValue: {\n    type: null,\n    default: undefined,\n  },\n  multiple: Boolean,\n  mandatory: [Boolean, String] as PropType<boolean | 'force'>,\n  max: Number,\n  selectedClass: String,\n  disabled: Boolean,\n}, 'group')\n\nexport const makeGroupItemProps = propsFactory({\n  value: null,\n  disabled: Boolean,\n  selectedClass: String,\n}, 'group-item')\n\nexport type GroupItemProps = ExtractPropTypes<ReturnType<typeof makeGroupItemProps>>\n\n// Composables\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required?: true,\n): GroupItemProvide\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required: false,\n): GroupItemProvide | null\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required = true,\n): GroupItemProvide | null {\n  const vm = getCurrentInstance('useGroupItem')\n\n  if (!vm) {\n    throw new Error(\n      '[Vuetify] useGroupItem composable must be used inside a component setup function'\n    )\n  }\n\n  const id = getUid()\n\n  provide(Symbol.for(`${injectKey.description}:id`), id)\n\n  const group = inject(injectKey, null)\n\n  if (!group) {\n    if (!required) return group\n\n    throw new Error(`[Vuetify] Could not find useGroup injection with symbol ${injectKey.description}`)\n  }\n\n  const value = toRef(props, 'value')\n  const disabled = computed(() => group.disabled.value || props.disabled)\n\n  group.register({\n    id,\n    value,\n    disabled,\n  }, vm)\n\n  onBeforeUnmount(() => {\n    group.unregister(id)\n  })\n\n  const isSelected = computed(() => {\n    return group.isSelected(id)\n  })\n\n  const selectedClass = computed(() => isSelected.value && [group.selectedClass.value, props.selectedClass])\n\n  watch(isSelected, value => {\n    vm.emit('group:selected', { value })\n  })\n\n  return {\n    id,\n    isSelected,\n    toggle: () => group.select(id, !isSelected.value),\n    select: (value: boolean) => group.select(id, value),\n    selectedClass,\n    value,\n    disabled,\n    group,\n  }\n}\n\nexport function useGroup (\n  props: GroupProps,\n  injectKey: InjectionKey<GroupProvide>\n) {\n  let isUnmounted = false\n  const items = reactive<GroupItem[]>([])\n  const selected = useProxiedModel(\n    props,\n    'modelValue',\n    [],\n    v => {\n      if (v == null) return []\n\n      return getIds(items, wrapInArray(v))\n    },\n    v => {\n      const arr = getValues(items, v)\n\n      return props.multiple ? arr : arr[0]\n    }\n  )\n\n  const groupVm = getCurrentInstance('useGroup')\n\n  function register (item: GroupItem, vm: ComponentInternalInstance) {\n    // Is there a better way to fix this typing?\n    const unwrapped = item as unknown as UnwrapRef<GroupItem>\n\n    const key = Symbol.for(`${injectKey.description}:id`)\n    const children = findChildrenWithProvide(key, groupVm?.vnode)\n    const index = children.indexOf(vm)\n\n    if (index > -1) {\n      items.splice(index, 0, unwrapped)\n    } else {\n      items.push(unwrapped)\n    }\n  }\n\n  function unregister (id: number) {\n    if (isUnmounted) return\n\n    // TODO: re-evaluate this line's importance in the future\n    // should we only modify the model if mandatory is set.\n    // selected.value = selected.value.filter(v => v !== id)\n\n    forceMandatoryValue()\n\n    const index = items.findIndex(item => item.id === id)\n    items.splice(index, 1)\n  }\n\n  // If mandatory and nothing is selected, then select first non-disabled item\n  function forceMandatoryValue () {\n    const item = items.find(item => !item.disabled)\n    if (item && props.mandatory === 'force' && !selected.value.length) {\n      selected.value = [item.id]\n    }\n  }\n\n  onMounted(() => {\n    forceMandatoryValue()\n  })\n\n  onBeforeUnmount(() => {\n    isUnmounted = true\n  })\n\n  function select (id: number, value?: boolean) {\n    const item = items.find(item => item.id === id)\n    if (value && item?.disabled) return\n\n    if (props.multiple) {\n      const internalValue = selected.value.slice()\n      const index = internalValue.findIndex(v => v === id)\n      const isSelected = ~index\n      value = value ?? !isSelected\n\n      // We can't remove value if group is\n      // mandatory, value already exists,\n      // and it is the only value\n      if (\n        isSelected &&\n        props.mandatory &&\n        internalValue.length <= 1\n      ) return\n\n      // We can't add value if it would\n      // cause max limit to be exceeded\n      if (\n        !isSelected &&\n        props.max != null &&\n        internalValue.length + 1 > props.max\n      ) return\n\n      if (index < 0 && value) internalValue.push(id)\n      else if (index >= 0 && !value) internalValue.splice(index, 1)\n\n      selected.value = internalValue\n    } else {\n      const isSelected = selected.value.includes(id)\n      if (props.mandatory && isSelected) return\n\n      selected.value = (value ?? !isSelected) ? [id] : []\n    }\n  }\n\n  function step (offset: number) {\n    // getting an offset from selected value obviously won't work with multiple values\n    if (props.multiple) consoleWarn('This method is not supported when using \"multiple\" prop')\n\n    if (!selected.value.length) {\n      const item = items.find(item => !item.disabled)\n      item && (selected.value = [item.id])\n    } else {\n      const currentId = selected.value[0]\n      const currentIndex = items.findIndex(i => i.id === currentId)\n\n      let newIndex = (currentIndex + offset) % items.length\n      let newItem = items[newIndex]\n\n      while (newItem.disabled && newIndex !== currentIndex) {\n        newIndex = (newIndex + offset) % items.length\n        newItem = items[newIndex]\n      }\n\n      if (newItem.disabled) return\n\n      selected.value = [items[newIndex].id]\n    }\n  }\n\n  const state: GroupProvide = {\n    register,\n    unregister,\n    selected,\n    select,\n    disabled: toRef(props, 'disabled'),\n    prev: () => step(items.length - 1),\n    next: () => step(1),\n    isSelected: (id: number) => selected.value.includes(id),\n    selectedClass: computed(() => props.selectedClass),\n    items: computed(() => items),\n    getItemIndex: (value: unknown) => getItemIndex(items, value),\n  }\n\n  provide(injectKey, state)\n\n  return state\n}\n\nfunction getItemIndex (items: UnwrapRef<GroupItem[]>, value: unknown) {\n  const ids = getIds(items, [value])\n\n  if (!ids.length) return -1\n\n  return items.findIndex(item => item.id === ids[0])\n}\n\nfunction getIds (items: UnwrapRef<GroupItem[]>, modelValue: any[]) {\n  const ids = []\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i]\n\n    if (item.value != null) {\n      if (modelValue.find(value => deepEqual(value, item.value)) != null) {\n        ids.push(item.id)\n      }\n    } else if (modelValue.includes(i)) {\n      ids.push(item.id)\n    }\n  }\n\n  return ids\n}\n\nfunction getValues (items: UnwrapRef<GroupItem[]>, ids: any[]) {\n  const values = []\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i]\n\n    if (ids.includes(item.id)) {\n      values.push(item.value != null ? item.value : i)\n    }\n  }\n\n  return values\n}\n"]},"metadata":{},"sourceType":"module"}