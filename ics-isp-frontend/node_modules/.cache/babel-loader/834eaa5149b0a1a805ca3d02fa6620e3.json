{"ast":null,"code":"// Utilities\nimport { onBeforeUnmount, ref, watch } from 'vue';\nimport { SUPPORTS_INTERSECTION } from \"../util/index.mjs\";\nexport function useIntersectionObserver(callback) {\n  const intersectionRef = ref();\n  const isIntersecting = ref(false);\n\n  if (SUPPORTS_INTERSECTION) {\n    const observer = new IntersectionObserver(entries => {\n      callback == null ? void 0 : callback(entries, observer);\n      isIntersecting.value = !!entries.find(entry => entry.isIntersecting);\n    });\n    onBeforeUnmount(() => {\n      observer.disconnect();\n    });\n    watch(intersectionRef, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue);\n        isIntersecting.value = false;\n      }\n\n      if (newValue) observer.observe(newValue);\n    }, {\n      flush: 'post'\n    });\n  }\n\n  return {\n    intersectionRef,\n    isIntersecting\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,eAAT,EAA0BC,GAA1B,EAA+BC,KAA/B,QAA4C,KAA5C;SACSC,6B;AAET,OAAO,SAASC,uBAAT,CAAkCC,QAAlC,EAA2E;EAChF,MAAMC,eAAe,GAAGL,GAAG,EAA3B;EACA,MAAMM,cAAc,GAAGN,GAAG,CAAC,KAAD,CAA1B;;EAEA,IAAIE,qBAAJ,EAA2B;IACzB,MAAMK,QAAQ,GAAG,IAAIC,oBAAJ,CAA0BC,OAAD,IAA0C;MAClFL,QAAQ,QAARA,oBAAQ,CAAGK,OAAH,EAAYF,QAAZ,CAARH;MAEAE,cAAc,CAACI,KAAfJ,GAAuB,CAAC,CAACG,OAAO,CAACE,IAARF,CAAaG,KAAK,IAAIA,KAAK,CAACN,cAA5BG,CAAzBH;IAHe,EAAjB;IAMAP,eAAe,CAAC,MAAM;MACpBQ,QAAQ,CAACM,UAATN;IADa,EAAfR;IAIAE,KAAK,CAACI,eAAD,EAAkB,CAACS,QAAD,EAAWC,QAAX,KAAwB;MAC7C,IAAIA,QAAJ,EAAc;QACZR,QAAQ,CAACS,SAATT,CAAmBQ,QAAnBR;QACAD,cAAc,CAACI,KAAfJ,GAAuB,KAAvBA;MACD;;MAED,IAAIQ,QAAJ,EAAcP,QAAQ,CAACU,OAATV,CAAiBO,QAAjBP;IANX,GAOF;MACDW,KAAK,EAAE;IADN,CAPE,CAALjB;EAUD;;EAED,OAAO;IAAEI,eAAF;IAAmBC;EAAnB,CAAP;AACD","names":["onBeforeUnmount","ref","watch","SUPPORTS_INTERSECTION","useIntersectionObserver","callback","intersectionRef","isIntersecting","observer","IntersectionObserver","entries","value","find","entry","disconnect","newValue","oldValue","unobserve","observe","flush"],"sources":["../../src/composables/intersectionObserver.ts"],"sourcesContent":["// Utilities\nimport { onBeforeUnmount, ref, watch } from 'vue'\nimport { SUPPORTS_INTERSECTION } from '@/util'\n\nexport function useIntersectionObserver (callback?: IntersectionObserverCallback) {\n  const intersectionRef = ref<HTMLElement>()\n  const isIntersecting = ref(false)\n\n  if (SUPPORTS_INTERSECTION) {\n    const observer = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {\n      callback?.(entries, observer)\n\n      isIntersecting.value = !!entries.find(entry => entry.isIntersecting)\n    })\n\n    onBeforeUnmount(() => {\n      observer.disconnect()\n    })\n\n    watch(intersectionRef, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue)\n        isIntersecting.value = false\n      }\n\n      if (newValue) observer.observe(newValue)\n    }, {\n      flush: 'post',\n    })\n  }\n\n  return { intersectionRef, isIntersecting }\n}\n"]},"metadata":{},"sourceType":"module"}