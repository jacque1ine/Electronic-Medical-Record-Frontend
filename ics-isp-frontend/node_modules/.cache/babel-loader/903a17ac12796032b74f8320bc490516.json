{"ast":null,"code":"// Composables\nimport { useForm } from \"./form.mjs\";\nimport { useProxiedModel } from \"./proxiedModel.mjs\"; // Utilities\n\nimport { computed, onBeforeMount, onBeforeUnmount, ref, watch } from 'vue';\nimport { getCurrentInstanceName, getUid, propsFactory, wrapInArray } from \"../util/index.mjs\"; // Types\n\nexport const makeValidationProps = propsFactory({\n  disabled: Boolean,\n  error: Boolean,\n  errorMessages: {\n    type: [Array, String],\n    default: () => []\n  },\n  maxErrors: {\n    type: [Number, String],\n    default: 1\n  },\n  name: String,\n  readonly: Boolean,\n  rules: {\n    type: Array,\n    default: () => []\n  },\n  modelValue: null\n});\nexport function useValidation(props) {\n  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentInstanceName();\n  const model = useProxiedModel(props, 'modelValue');\n  const form = useForm();\n  const internalErrorMessages = ref([]);\n  const isPristine = ref(true);\n  const isDirty = computed(() => wrapInArray(model.value || []).length > 0);\n  const isDisabled = computed(() => !!(props.disabled || form != null && form.isDisabled.value));\n  const isReadonly = computed(() => !!(props.readonly || form != null && form.isReadonly.value));\n  const errorMessages = computed(() => {\n    return props.errorMessages.length ? wrapInArray(props.errorMessages) : internalErrorMessages.value;\n  });\n  const isValid = computed(() => {\n    if (props.error || errorMessages.value.length) return false;\n    return isPristine.value ? null : true;\n  });\n  const isValidating = ref(false);\n  const validationClasses = computed(() => {\n    return {\n      [`${name}--error`]: isValid.value === false,\n      [`${name}--dirty`]: isDirty.value,\n      [`${name}--disabled`]: isDisabled.value,\n      [`${name}--readonly`]: isReadonly.value\n    };\n  });\n  const uid = computed(() => {\n    var _props$name;\n\n    return (_props$name = props.name) != null ? _props$name : getUid();\n  });\n  onBeforeMount(() => {\n    form == null ? void 0 : form.register(uid.value, validate, reset, resetValidation);\n  });\n  onBeforeUnmount(() => {\n    form == null ? void 0 : form.unregister(uid.value);\n  });\n  watch(model, validate);\n\n  function reset() {\n    resetValidation();\n    model.value = null;\n  }\n\n  function resetValidation() {\n    isPristine.value = true;\n    internalErrorMessages.value = [];\n  }\n\n  async function validate() {\n    const results = [];\n    isValidating.value = true;\n\n    for (const rule of props.rules) {\n      if (results.length >= (props.maxErrors || 1)) {\n        break;\n      }\n\n      const handler = typeof rule === 'function' ? rule : () => rule;\n      const result = await handler(model.value);\n      if (result === true) continue;\n\n      if (typeof result !== 'string') {\n        // eslint-disable-next-line no-console\n        console.warn(`${result} is not a valid value. Rule functions must return boolean true or a string.`);\n        continue;\n      }\n\n      results.push(result);\n    }\n\n    internalErrorMessages.value = results;\n    isValidating.value = false;\n    isPristine.value = false;\n    return internalErrorMessages.value;\n  }\n\n  return {\n    errorMessages,\n    isDirty,\n    isDisabled,\n    isReadonly,\n    isPristine,\n    isValid,\n    isValidating,\n    reset,\n    resetValidation,\n    validate,\n    validationClasses\n  };\n}","map":{"version":3,"mappings":"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","names":["useForm","useProxiedModel","computed","onBeforeMount","onBeforeUnmount","ref","watch","getCurrentInstanceName","getUid","propsFactory","wrapInArray","makeValidationProps","disabled","Boolean","error","errorMessages","type","Array","String","default","maxErrors","Number","name","readonly","rules","modelValue","useValidation","props","model","form","internalErrorMessages","isPristine","isDirty","value","length","isDisabled","isReadonly","isValid","isValidating","validationClasses","uid","register","validate","reset","resetValidation","unregister","results","rule","handler","result","console","warn","push"],"sources":["../../src/composables/validation.ts"],"sourcesContent":["// Composables\nimport { useForm } from '@/composables/form'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, onBeforeMount, onBeforeUnmount, ref, watch } from 'vue'\nimport { getCurrentInstanceName, getUid, propsFactory, wrapInArray } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport type ValidationResult = string | true\nexport type ValidationRule =\n  | ValidationResult\n  | PromiseLike<ValidationResult>\n  | ((value: any) => ValidationResult)\n  | ((value: any) => PromiseLike<ValidationResult>)\n\nexport interface ValidationProps {\n  disabled: boolean\n  error: boolean\n  errorMessages: string | string[]\n  maxErrors: string | number\n  name: string | undefined\n  readonly: boolean\n  rules: ValidationRule[]\n  modelValue: any\n  'onUpdate:modelValue': ((val: any) => void) | undefined\n}\n\nexport const makeValidationProps = propsFactory({\n  disabled: Boolean,\n  error: Boolean,\n  errorMessages: {\n    type: [Array, String] as PropType<string | string[]>,\n    default: () => ([]),\n  },\n  maxErrors: {\n    type: [Number, String],\n    default: 1,\n  },\n  name: String,\n  readonly: Boolean,\n  rules: {\n    type: Array as PropType<ValidationRule[]>,\n    default: () => ([]),\n  },\n  modelValue: null,\n})\n\nexport function useValidation (\n  props: ValidationProps,\n  name = getCurrentInstanceName(),\n) {\n  const model = useProxiedModel(props, 'modelValue')\n  const form = useForm()\n  const internalErrorMessages = ref<string[]>([])\n  const isPristine = ref(true)\n  const isDirty = computed(() => wrapInArray(model.value || []).length > 0)\n  const isDisabled = computed(() => !!(props.disabled || form?.isDisabled.value))\n  const isReadonly = computed(() => !!(props.readonly || form?.isReadonly.value))\n  const errorMessages = computed(() => {\n    return props.errorMessages.length\n      ? wrapInArray(props.errorMessages)\n      : internalErrorMessages.value\n  })\n  const isValid = computed(() => {\n    if (props.error || errorMessages.value.length) return false\n\n    return isPristine.value ? null : true\n  })\n  const isValidating = ref(false)\n  const validationClasses = computed(() => {\n    return {\n      [`${name}--error`]: isValid.value === false,\n      [`${name}--dirty`]: isDirty.value,\n      [`${name}--disabled`]: isDisabled.value,\n      [`${name}--readonly`]: isReadonly.value,\n    }\n  })\n\n  const uid = computed(() => props.name ?? getUid())\n\n  onBeforeMount(() => {\n    form?.register(uid.value, validate, reset, resetValidation)\n  })\n\n  onBeforeUnmount(() => {\n    form?.unregister(uid.value)\n  })\n\n  watch(model, validate)\n\n  function reset () {\n    resetValidation()\n    model.value = null\n  }\n\n  function resetValidation () {\n    isPristine.value = true\n    internalErrorMessages.value = []\n  }\n\n  async function validate () {\n    const results = []\n\n    isValidating.value = true\n\n    for (const rule of props.rules) {\n      if (results.length >= (props.maxErrors || 1)) {\n        break\n      }\n\n      const handler = typeof rule === 'function' ? rule : () => rule\n      const result = await handler(model.value)\n\n      if (result === true) continue\n\n      if (typeof result !== 'string') {\n        // eslint-disable-next-line no-console\n        console.warn(`${result} is not a valid value. Rule functions must return boolean true or a string.`)\n\n        continue\n      }\n\n      results.push(result)\n    }\n\n    internalErrorMessages.value = results\n    isValidating.value = false\n    isPristine.value = false\n\n    return internalErrorMessages.value\n  }\n\n  return {\n    errorMessages,\n    isDirty,\n    isDisabled,\n    isReadonly,\n    isPristine,\n    isValid,\n    isValidating,\n    reset,\n    resetValidation,\n    validate,\n    validationClasses,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}