{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { mergeProps as _mergeProps, Fragment as _Fragment, withDirectives as _withDirectives, vShow as _vShow, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VField.css\"; // Components\n\nimport { VExpandXTransition } from \"../transitions/index.mjs\";\nimport { VIcon } from \"../VIcon/index.mjs\";\nimport { VFieldLabel } from \"./VFieldLabel.mjs\"; // Composables\n\nimport { LoaderSlot, makeLoaderProps, useLoader } from \"../../composables/loader.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { useBackgroundColor, useTextColor } from \"../../composables/color.mjs\";\nimport { makeFocusProps, useFocus } from \"../../composables/focus.mjs\"; // Utilities\n\nimport { computed, ref, toRef, watch } from 'vue';\nimport { convertToUnit, genericComponent, getUid, nullifyTransforms, pick, propsFactory, standardEasing, useRender } from \"../../util/index.mjs\"; // Types\n\nconst allowedVariants = ['underlined', 'outlined', 'filled', 'contained', 'plain'];\nexport const makeVFieldProps = propsFactory({\n  appendInnerIcon: String,\n  bgColor: String,\n  clearable: Boolean,\n  clearIcon: {\n    type: String,\n    default: '$clear'\n  },\n  active: Boolean,\n  color: String,\n  dirty: Boolean,\n  disabled: Boolean,\n  error: Boolean,\n  label: String,\n  persistentClear: Boolean,\n  prependInnerIcon: String,\n  reverse: Boolean,\n  singleLine: Boolean,\n  variant: {\n    type: String,\n    default: 'filled',\n    validator: v => allowedVariants.includes(v)\n  },\n  ...makeThemeProps(),\n  ...makeLoaderProps()\n}, 'v-field');\nexport const VField = genericComponent()({\n  name: 'VField',\n  inheritAttrs: false,\n  props: {\n    id: String,\n    ...makeFocusProps(),\n    ...makeVFieldProps()\n  },\n  emits: {\n    'click:clear': e => true,\n    'click:prepend-inner': e => true,\n    'click:append-inner': e => true,\n    'click:control': e => true,\n    'update:focused': focused => true,\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      loaderClasses\n    } = useLoader(props);\n    const {\n      focusClasses,\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const isActive = computed(() => props.dirty || props.active);\n    const hasLabel = computed(() => !props.singleLine && !!(props.label || slots.label));\n    const uid = getUid();\n    const id = computed(() => props.id || `input-${uid}`);\n    const labelRef = ref();\n    const floatingLabelRef = ref();\n    const controlRef = ref();\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(toRef(props, 'bgColor'));\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(computed(() => {\n      return isActive.value && isFocused.value && !props.error && !props.disabled ? props.color : undefined;\n    }));\n    watch(isActive, val => {\n      if (hasLabel.value) {\n        const el = labelRef.value.$el;\n        const targetEl = floatingLabelRef.value.$el;\n        const rect = nullifyTransforms(el);\n        const targetRect = targetEl.getBoundingClientRect();\n        const x = targetRect.x - rect.x;\n        const y = targetRect.y - rect.y - (rect.height / 2 - targetRect.height / 2);\n        const targetWidth = targetRect.width / 0.75;\n        const width = Math.abs(targetWidth - rect.width) > 1 ? {\n          maxWidth: convertToUnit(targetWidth)\n        } : undefined;\n        const duration = parseFloat(getComputedStyle(el).transitionDuration) * 1000;\n        const scale = parseFloat(getComputedStyle(targetEl).getPropertyValue('--v-field-label-scale'));\n        el.style.visibility = 'visible';\n        targetEl.style.visibility = 'hidden';\n        el.animate([{\n          transform: 'translate(0)'\n        }, {\n          transform: `translate(${x}px, ${y}px) scale(${scale})`,\n          ...width\n        }], {\n          duration,\n          easing: standardEasing,\n          direction: val ? 'normal' : 'reverse'\n        }).finished.then(() => {\n          el.style.removeProperty('visibility');\n          targetEl.style.removeProperty('visibility');\n        });\n      }\n    }, {\n      flush: 'post'\n    });\n    const slotProps = computed(() => ({\n      isActive,\n      isFocused,\n      controlRef,\n      blur,\n      focus\n    }));\n\n    function onClick(e) {\n      if (e.target !== document.activeElement) {\n        e.preventDefault();\n      }\n\n      emit('click:control', e);\n    }\n\n    useRender(() => {\n      var _slots$prependInner, _slots$default, _slots$appendInner;\n\n      const isOutlined = props.variant === 'outlined';\n      const hasPrepend = slots.prependInner || props.prependInnerIcon;\n      const hasClear = !!(props.clearable || slots.clear);\n      const hasAppend = !!(slots.appendInner || props.appendInnerIcon || hasClear);\n      const label = slots.label ? slots.label({\n        label: props.label,\n        props: {\n          for: id.value\n        }\n      }) : props.label;\n      return _createVNode(\"div\", _mergeProps({\n        \"class\": ['v-field', {\n          'v-field--active': isActive.value,\n          'v-field--appended': hasAppend,\n          'v-field--disabled': props.disabled,\n          'v-field--dirty': props.dirty,\n          'v-field--error': props.error,\n          'v-field--has-background': !!props.bgColor,\n          'v-field--persistent-clear': props.persistentClear,\n          'v-field--prepended': hasPrepend,\n          'v-field--reverse': props.reverse,\n          'v-field--single-line': props.singleLine,\n          [`v-field--variant-${props.variant}`]: true\n        }, themeClasses.value, backgroundColorClasses.value, focusClasses.value, loaderClasses.value],\n        \"style\": [backgroundColorStyles.value, textColorStyles.value],\n        \"onClick\": onClick\n      }, attrs), [_createVNode(\"div\", {\n        \"class\": \"v-field__overlay\"\n      }, null), _createVNode(LoaderSlot, {\n        \"name\": \"v-field\",\n        \"active\": props.loading,\n        \"color\": props.error ? 'error' : props.color\n      }, {\n        default: slots.loader\n      }), hasPrepend && _createVNode(\"div\", {\n        \"class\": \"v-field__prepend-inner\"\n      }, [props.prependInnerIcon && _createVNode(VIcon, {\n        \"onClick\": e => emit('click:prepend-inner', e),\n        \"icon\": props.prependInnerIcon\n      }, null), slots == null ? void 0 : (_slots$prependInner = slots.prependInner) == null ? void 0 : _slots$prependInner.call(slots, slotProps.value)]), _createVNode(\"div\", {\n        \"class\": \"v-field__field\"\n      }, [['contained', 'filled'].includes(props.variant) && hasLabel.value && _createVNode(VFieldLabel, {\n        \"ref\": floatingLabelRef,\n        \"class\": [textColorClasses.value],\n        \"floating\": true\n      }, {\n        default: () => [label]\n      }), _createVNode(VFieldLabel, {\n        \"ref\": labelRef,\n        \"for\": id.value\n      }, {\n        default: () => [label]\n      }), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, { ...slotProps.value,\n        props: {\n          id: id.value,\n          class: 'v-field__input'\n        },\n        focus,\n        blur\n      })]), hasClear && _createVNode(VExpandXTransition, null, {\n        default: () => [_withDirectives(_createVNode(\"div\", {\n          \"class\": \"v-field__clearable\"\n        }, [slots.clear ? slots.clear() : _createVNode(VIcon, {\n          \"onClick\": e => emit('click:clear', e),\n          \"icon\": props.clearIcon\n        }, null)]), [[_vShow, props.dirty]])]\n      }), hasAppend && _createVNode(\"div\", {\n        \"class\": \"v-field__append-inner\"\n      }, [slots == null ? void 0 : (_slots$appendInner = slots.appendInner) == null ? void 0 : _slots$appendInner.call(slots, slotProps.value), props.appendInnerIcon && _createVNode(VIcon, {\n        \"onClick\": e => emit('click:append-inner', e),\n        \"icon\": props.appendInnerIcon\n      }, null)]), _createVNode(\"div\", {\n        \"class\": ['v-field__outline', textColorClasses.value]\n      }, [isOutlined && _createVNode(_Fragment, null, [_createVNode(\"div\", {\n        \"class\": \"v-field__outline__start\"\n      }, null), hasLabel.value && _createVNode(\"div\", {\n        \"class\": \"v-field__outline__notch\"\n      }, [_createVNode(VFieldLabel, {\n        \"ref\": floatingLabelRef,\n        \"floating\": true\n      }, {\n        default: () => [label]\n      })]), _createVNode(\"div\", {\n        \"class\": \"v-field__outline__end\"\n      }, null)]), ['plain', 'underlined'].includes(props.variant) && hasLabel.value && _createVNode(VFieldLabel, {\n        \"ref\": floatingLabelRef,\n        \"floating\": true\n      }, {\n        default: () => [label]\n      })])]);\n    });\n    return {\n      controlRef\n    };\n  }\n\n}); // TODO: this is kinda slow, might be better to implicitly inherit props instead\n\nexport function filterFieldProps(attrs) {\n  return pick(attrs, Object.keys(VField.props));\n}","map":{"version":3,"mappings":";gMAAA;;AACA,sB,CAEA;;SACSA,0B;SACAC,a;SACAC,mB,qBAET;;SACSC,YAAYC,iBAAiBC,iB;SAC7BC,gBAAgBC,oB;SAChBC,oBAAoBC,oB;SACpBC,gBAAgBC,gB,+BAEzB;;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,KAAxB,EAA+BC,KAA/B,QAA4C,KAA5C;SAEEC,eACAC,kBACAC,QACAC,mBACAC,MACAC,cACAC,gBACAC,iB,wBAGF;;AAMA,MAAMC,eAAe,GAAG,CAAC,YAAD,EAAe,UAAf,EAA2B,QAA3B,EAAqC,WAArC,EAAkD,OAAlD,CAAxB;AAeA,OAAO,MAAMC,eAAe,GAAGJ,YAAY,CAAC;EAC1CK,eAAe,EAAEC,MADyB;EAE1CC,OAAO,EAAED,MAFiC;EAG1CE,SAAS,EAAEC,OAH+B;EAI1CC,SAAS,EAAE;IACTC,IAAI,EAAEL,MADG;IAETM,OAAO,EAAE;EAFA,CAJ+B;EAQ1CC,MAAM,EAAEJ,OARkC;EAS1CK,KAAK,EAAER,MATmC;EAU1CS,KAAK,EAAEN,OAVmC;EAW1CO,QAAQ,EAAEP,OAXgC;EAY1CQ,KAAK,EAAER,OAZmC;EAa1CS,KAAK,EAAEZ,MAbmC;EAc1Ca,eAAe,EAAEV,OAdyB;EAe1CW,gBAAgB,EAAEd,MAfwB;EAgB1Ce,OAAO,EAAEZ,OAhBiC;EAiB1Ca,UAAU,EAAEb,OAjB8B;EAkB1Cc,OAAO,EAAE;IACPZ,IAAI,EAAEL,MADC;IAEPM,OAAO,EAAE,QAFF;IAGPY,SAAS,EAAGC,CAAD,IAAYtB,eAAe,CAACuB,QAAhBvB,CAAyBsB,CAAzBtB;EAHhB,CAlBiC;EAwB1C,GAAGlB,cAAc,EAxByB;EAyB1C,GAAGF,eAAe;AAzBwB,CAAD,EA0BxC,SA1BwC,CAApC;AAqCP,OAAO,MAAM4C,MAAM,GAAG/B,gBAAgB,GAMjC;EACHgC,IAAI,EAAE,QADH;EAGHC,YAAY,EAAE,KAHX;EAKHC,KAAK,EAAE;IACLC,EAAE,EAAEzB,MADC;IAGL,GAAGjB,cAAc,EAHZ;IAIL,GAAGe,eAAe;EAJb,CALJ;EAYH4B,KAAK,EAAE;IACL,eAAgBC,CAAD,IAAmB,IAD7B;IAEL,uBAAwBA,CAAD,IAAmB,IAFrC;IAGL,sBAAuBA,CAAD,IAAmB,IAHpC;IAIL,iBAAkBA,CAAD,IAAmB,IAJ/B;IAKL,kBAAmBC,OAAD,IAAsB,IALnC;IAML,qBAAsBC,GAAD,IAAc;EAN9B,CAZJ;;EAqBHC,KAAK,CAAEN,KAAF,QAAiC;IAAA,IAAxB;MAAEO,KAAF;MAASC,IAAT;MAAeC;IAAf,IAAwBC;IACpC,MAAM;MAAEC;IAAF,IAAmBvD,YAAY,CAAC4C,KAAD,CAArC;IACA,MAAM;MAAEY;IAAF,IAAoB1D,SAAS,CAAC8C,KAAD,CAAnC;IACA,MAAM;MAAEa,YAAF;MAAgBC,SAAhB;MAA2BC,KAA3B;MAAkCC;IAAlC,IAA2CxD,QAAQ,CAACwC,KAAD,CAAzD;IAEA,MAAMiB,QAAQ,GAAGxD,QAAQ,CAAC,MAAMuC,KAAK,CAACf,KAANe,IAAeA,KAAK,CAACjB,MAA5B,CAAzB;IACA,MAAMmC,QAAQ,GAAGzD,QAAQ,CAAC,MAAM,CAACuC,KAAK,CAACR,UAAP,IAAqB,CAAC,EAAEQ,KAAK,CAACZ,KAANY,IAAeS,KAAK,CAACrB,KAAvB,CAA7B,CAAzB;IAEA,MAAM+B,GAAG,GAAGpD,MAAM,EAAlB;IACA,MAAMkC,EAAE,GAAGxC,QAAQ,CAAC,MAAMuC,KAAK,CAACC,EAAND,IAAa,SAAQmB,GAAI,EAAhC,CAAnB;IAEA,MAAMC,QAAQ,GAAG1D,GAAG,EAApB;IACA,MAAM2D,gBAAgB,GAAG3D,GAAG,EAA5B;IACA,MAAM4D,UAAU,GAAG5D,GAAG,EAAtB;IAEA,MAAM;MAAE6D,sBAAF;MAA0BC;IAA1B,IAAoDnE,kBAAkB,CAACM,KAAK,CAACqC,KAAD,EAAQ,SAAR,CAAN,CAA5E;IACA,MAAM;MAAEyB,gBAAF;MAAoBC;IAApB,IAAwCpE,YAAY,CAACG,QAAQ,CAAC,MAAM;MACxE,OACEwD,QAAQ,CAACU,KAATV,IACAH,SAAS,CAACa,KADVV,IAEA,CAACjB,KAAK,CAACb,KAFP8B,IAGA,CAACjB,KAAK,CAACd,QAHP+B,GAIEjB,KAAK,CAAChB,KAJRiC,GAIgBW,SALlB;IADiE,EAAT,CAA1D;IASAhE,KAAK,CAACqD,QAAD,EAAWZ,GAAG,IAAI;MACrB,IAAIa,QAAQ,CAACS,KAAb,EAAoB;QAClB,MAAME,EAAe,GAAGT,QAAQ,CAACO,KAATP,CAAgBU,GAAxC;QACA,MAAMC,QAAqB,GAAGV,gBAAgB,CAACM,KAAjBN,CAAwBS,GAAtD;QACA,MAAME,IAAI,GAAGhE,iBAAiB,CAAC6D,EAAD,CAA9B;QACA,MAAMI,UAAU,GAAGF,QAAQ,CAACG,qBAATH,EAAnB;QAEA,MAAMI,CAAC,GAAGF,UAAU,CAACE,CAAXF,GAAeD,IAAI,CAACG,CAA9B;QACA,MAAMC,CAAC,GAAGH,UAAU,CAACG,CAAXH,GAAeD,IAAI,CAACI,CAApBH,IAAyBD,IAAI,CAACK,MAALL,GAAc,CAAdA,GAAkBC,UAAU,CAACI,MAAXJ,GAAoB,CAA/DA,CAAV;QAEA,MAAMK,WAAW,GAAGL,UAAU,CAACM,KAAXN,GAAmB,IAAvC;QACA,MAAMM,KAAK,GAAGC,IAAI,CAACC,GAALD,CAASF,WAAW,GAAGN,IAAI,CAACO,KAA5BC,IAAqC,CAArCA,GACV;UAAEE,QAAQ,EAAE7E,aAAa,CAACyE,WAAD;QAAzB,CADUE,GAEVZ,SAFJ;QAIA,MAAMe,QAAQ,GAAGC,UAAU,CAACC,gBAAgB,CAAChB,EAAD,CAAhBgB,CAAqBC,kBAAtB,CAAVF,GAAsD,IAAvE;QACA,MAAMG,KAAK,GAAGH,UAAU,CAACC,gBAAgB,CAACd,QAAD,CAAhBc,CAA2BG,gBAA3BH,CAA4C,uBAA5CA,CAAD,CAAxB;QAEAhB,EAAE,CAACoB,KAAHpB,CAASqB,UAATrB,GAAsB,SAAtBA;QACAE,QAAQ,CAACkB,KAATlB,CAAemB,UAAfnB,GAA4B,QAA5BA;QAEAF,EAAE,CAACsB,OAAHtB,CAAW,CACT;UAAEuB,SAAS,EAAE;QAAb,CADS,EAET;UAAEA,SAAS,EAAG,aAAYjB,CAAE,OAAMC,CAAE,aAAYW,KAAM,GAAtD;UAA0D,GAAGR;QAA7D,CAFS,CAAXV,EAGG;UACDc,QADC;UAEDU,MAAM,EAAElF,cAFP;UAGDmF,SAAS,EAAEjD,GAAG,GAAG,QAAH,GAAc;QAH3B,CAHHwB,EAOG0B,QAPH1B,CAOY2B,IAPZ3B,CAOiB,MAAM;UACrBA,EAAE,CAACoB,KAAHpB,CAAS4B,cAAT5B,CAAwB,YAAxBA;UACAE,QAAQ,CAACkB,KAATlB,CAAe0B,cAAf1B,CAA8B,YAA9BA;QATF;MAWD;IAhCE,GAiCF;MAAE2B,KAAK,EAAE;IAAT,CAjCE,CAAL9F;IAmCA,MAAM+F,SAAS,GAAGlG,QAAQ,CAAmB,OAAO;MAClDwD,QADkD;MAElDH,SAFkD;MAGlDQ,UAHkD;MAIlDN,IAJkD;MAKlDD;IALkD,CAAP,CAAnB,CAA1B;;IAQA,SAAS6C,OAAT,CAAkBzD,CAAlB,EAAiC;MAC/B,IAAIA,CAAC,CAAC0D,MAAF1D,KAAa2D,QAAQ,CAACC,aAA1B,EAAyC;QACvC5D,CAAC,CAAC6D,cAAF7D;MACD;;MAEDK,IAAI,CAAC,eAAD,EAAkBL,CAAlB,CAAJK;IACD;;IAEDpC,SAAS,CAAC,MAAM;MAAA;;MACd,MAAM6F,UAAU,GAAGjE,KAAK,CAACP,OAANO,KAAkB,UAArC;MACA,MAAMkE,UAAU,GAAIzD,KAAK,CAAC0D,YAAN1D,IAAsBT,KAAK,CAACV,gBAAhD;MACA,MAAM8E,QAAQ,GAAG,CAAC,EAAEpE,KAAK,CAACtB,SAANsB,IAAmBS,KAAK,CAAC4D,KAA3B,CAAlB;MACA,MAAMC,SAAS,GAAG,CAAC,EAAE7D,KAAK,CAAC8D,WAAN9D,IAAqBT,KAAK,CAACzB,eAA3BkC,IAA8C2D,QAAhD,CAAnB;MACA,MAAMhF,KAAK,GAAGqB,KAAK,CAACrB,KAANqB,GACVA,KAAK,CAACrB,KAANqB,CAAY;QACZrB,KAAK,EAAEY,KAAK,CAACZ,KADD;QAEZY,KAAK,EAAE;UAAEwE,GAAG,EAAEvE,EAAE,CAAC0B;QAAV;MAFK,CAAZlB,CADUA,GAKVT,KAAK,CAACZ,KALV;MAOA;QAAA,SAEW,CACL,SADK,EAEL;UACE,mBAAmB6B,QAAQ,CAACU,KAD9B;UAEE,qBAAqB2C,SAFvB;UAGE,qBAAqBtE,KAAK,CAACd,QAH7B;UAIE,kBAAkBc,KAAK,CAACf,KAJ1B;UAKE,kBAAkBe,KAAK,CAACb,KAL1B;UAME,2BAA2B,CAAC,CAACa,KAAK,CAACvB,OANrC;UAOE,6BAA6BuB,KAAK,CAACX,eAPrC;UAQE,sBAAsB6E,UARxB;UASE,oBAAoBlE,KAAK,CAACT,OAT5B;UAUE,wBAAwBS,KAAK,CAACR,UAVhC;UAWE,CAAE,oBAAmBQ,KAAK,CAACP,OAAQ,EAAnC,GAAuC;QAXzC,CAFK,EAeLkB,YAAY,CAACgB,KAfR,EAgBLJ,sBAAsB,CAACI,KAhBlB,EAiBLd,YAAY,CAACc,KAjBR,EAkBLf,aAAa,CAACe,KAlBT,CAFX;QAAA,SAsBW,CACLH,qBAAqB,CAACG,KADjB,EAELD,eAAe,CAACC,KAFX,CAtBX;QAAA,WA0BciC;MA1Bd,GA2BSrD,KA3BT;QAAA,SA6Be;MA7Bf;QAAA,QAgCW,SAhCX;QAAA,UAiCeP,KAAK,CAACyE,OAjCrB;QAAA,SAkCczE,KAAK,CAACb,KAANa,GAAc,OAAdA,GAAwBA,KAAK,CAAChB;MAlC5C,GAmCe;QAAEF,OAAO,EAAE2B,KAAK,CAACiE;MAAjB,CAnCf,GAsCMR,UAAU;QAAA,SAEF;MAFE,IAINlE,KAAK,CAACV,gBAANU;QAAA,WAEaG,CAAD,IAAmBK,IAAI,CAAC,qBAAD,EAAwBL,CAAxB,CAFnC;QAAA,QAGSH,KAAK,CAACV;MAHf,QAJM,EAWNmB,KAXM,QAWNA,GAXM,MAWNA,GAXM,uBAWNA,KAAK,CAAE0D,YAXD,qBAWNQ,gCAAsBhB,SAAS,CAAChC,KAAhC,CAXM,EAtChB;QAAA,SAqDe;MArDf,IAsDQ,CAAC,WAAD,EAAc,QAAd,EAAwB/B,QAAxB,CAAiCI,KAAK,CAACP,OAAvC,KAAmDyB,QAAQ,CAACS,KAA5D;QAAA,OAEQN,gBAFR;QAAA,SAGS,CAACI,gBAAgB,CAACE,KAAlB,CAHT;QAAA;MAAA;QAAA7C,gBAMIM,KANJ;MAAA,EAtDR;QAAA,OAgEyBgC,QAhEzB;QAAA,OAgE0CnB,EAAE,CAAC0B;MAhE7C;QAAA7C,gBAiEUM,KAjEV;MAAA,sBAoEQqB,KAAK,CAAC3B,OApEd,qBAoEQ8F,2BAAgB,EAChB,GAAGjB,SAAS,CAAChC,KADG;QAEhB3B,KAAK,EAAE;UACLC,EAAE,EAAEA,EAAE,CAAC0B,KADF;UAELkD,KAAK,EAAE;QAFF,CAFS;QAMhB9D,KANgB;QAOhBC;MAPgB,CAAhB,CApER,IA+EMoD,QAAQ;QAAAtF;UAAA,SAGE;QAHF,IAMF2B,KAAK,CAAC4D,KAAN5D,GACEA,KAAK,CAAC4D,KAAN5D,EADFA;UAAA,WAIeN,CAAD,IAAmBK,IAAI,CAAC,aAAD,EAAgBL,CAAhB,CAJrC;UAAA,QAKWH,KAAK,CAACpB;QALjB,QANE,cAIKoB,KAAK,CAACf,KAJX;MAAA,EA/Ed,EAkGMqF,SAAS;QAAA,SAED;MAFC,IAIL7D,KAJK,QAILA,GAJK,MAILA,GAJK,sBAILA,KAAK,CAAE8D,WAJF,qBAILO,+BAAqBnB,SAAS,CAAChC,KAA/B,CAJK,EAML3B,KAAK,CAACzB,eAANyB;QAAA,WAEaG,CAAD,IAAmBK,IAAI,CAAC,oBAAD,EAAuBL,CAAvB,CAFnC;QAAA,QAGSH,KAAK,CAACzB;MAHf,QANK,EAlGf;QAAA,SAkHa,CACL,kBADK,EAELkD,gBAAgB,CAACE,KAFZ;MAlHb,IAuHQsC,UAAU;QAAA,SAEG;MAFH,UAIN/C,QAAQ,CAACS,KAATT;QAAA,SACW;MADX;QAAA,OAEqBG,gBAFrB;QAAA;MAAA;QAAAvC,gBAGMM,KAHN;MAAA,IAJM;QAAA,SAYG;MAZH,UAvHlB,EAuIQ,CAAC,OAAD,EAAU,YAAV,EAAwBQ,QAAxB,CAAiCI,KAAK,CAACP,OAAvC,KAAmDyB,QAAQ,CAACS,KAA5D;QAAA,OACmBN,gBADnB;QAAA;MAAA;QAAAvC,gBAEIM,KAFJ;MAAA,EAvIR;IAZO,EAAThB;IA6JA,OAAO;MACLkD;IADK,CAAP;EAGD;;AAjQE,CANiC,CAA/B,C,CA4QP;;AACA,OAAO,SAASyD,gBAAT,CAA2BxE,KAA3B,EAA2D;EAChE,OAAOtC,IAAI,CAACsC,KAAD,EAAQyE,MAAM,CAACC,IAAPD,CAAYnF,MAAM,CAACG,KAAnBgF,CAAR,CAAX;AACD","names":["VExpandXTransition","VIcon","VFieldLabel","LoaderSlot","makeLoaderProps","useLoader","makeThemeProps","provideTheme","useBackgroundColor","useTextColor","makeFocusProps","useFocus","computed","ref","toRef","watch","convertToUnit","genericComponent","getUid","nullifyTransforms","pick","propsFactory","standardEasing","useRender","allowedVariants","makeVFieldProps","appendInnerIcon","String","bgColor","clearable","Boolean","clearIcon","type","default","active","color","dirty","disabled","error","label","persistentClear","prependInnerIcon","reverse","singleLine","variant","validator","v","includes","VField","name","inheritAttrs","props","id","emits","e","focused","val","setup","attrs","emit","slots","_ref","themeClasses","loaderClasses","focusClasses","isFocused","focus","blur","isActive","hasLabel","uid","labelRef","floatingLabelRef","controlRef","backgroundColorClasses","backgroundColorStyles","textColorClasses","textColorStyles","value","undefined","el","$el","targetEl","rect","targetRect","getBoundingClientRect","x","y","height","targetWidth","width","Math","abs","maxWidth","duration","parseFloat","getComputedStyle","transitionDuration","scale","getPropertyValue","style","visibility","animate","transform","easing","direction","finished","then","removeProperty","flush","slotProps","onClick","target","document","activeElement","preventDefault","isOutlined","hasPrepend","prependInner","hasClear","clear","hasAppend","appendInner","for","loading","loader","_slots$prependInner","_slots$default","class","_slots$appendInner","filterFieldProps","Object","keys"],"sources":["../../../src/components/VField/VField.tsx"],"sourcesContent":["// Styles\nimport './VField.sass'\n\n// Components\nimport { VExpandXTransition } from '@/components/transitions'\nimport { VIcon } from '@/components/VIcon'\nimport { VFieldLabel } from './VFieldLabel'\n\n// Composables\nimport { LoaderSlot, makeLoaderProps, useLoader } from '@/composables/loader'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useBackgroundColor, useTextColor } from '@/composables/color'\nimport { makeFocusProps, useFocus } from '@/composables/focus'\n\n// Utilities\nimport { computed, ref, toRef, watch } from 'vue'\nimport {\n  convertToUnit,\n  genericComponent,\n  getUid,\n  nullifyTransforms,\n  pick,\n  propsFactory,\n  standardEasing,\n  useRender,\n} from '@/util'\n\n// Types\nimport type { VInputSlot } from '@/components/VInput/VInput'\nimport type { LoaderSlotProps } from '@/composables/loader'\nimport type { PropType, Ref } from 'vue'\nimport type { MakeSlots } from '@/util'\n\nconst allowedVariants = ['underlined', 'outlined', 'filled', 'contained', 'plain'] as const\ntype Variant = typeof allowedVariants[number]\n\nexport interface DefaultInputSlot {\n  isActive: Ref<boolean>\n  isFocused: Ref<boolean>\n  controlRef: Ref<HTMLElement | undefined>\n  focus: () => void\n  blur: () => void\n}\n\nexport interface VFieldSlot extends DefaultInputSlot {\n  props: Record<string, unknown>\n}\n\nexport const makeVFieldProps = propsFactory({\n  appendInnerIcon: String,\n  bgColor: String,\n  clearable: Boolean,\n  clearIcon: {\n    type: String,\n    default: '$clear',\n  },\n  active: Boolean,\n  color: String,\n  dirty: Boolean,\n  disabled: Boolean,\n  error: Boolean,\n  label: String,\n  persistentClear: Boolean,\n  prependInnerIcon: String,\n  reverse: Boolean,\n  singleLine: Boolean,\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'filled',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n\n  ...makeThemeProps(),\n  ...makeLoaderProps(),\n}, 'v-field')\n\nexport type VFieldSlots = MakeSlots<{\n  clear: []\n  prependInner: [DefaultInputSlot & VInputSlot]\n  appendInner: [DefaultInputSlot & VInputSlot]\n  label: [DefaultInputSlot & VInputSlot]\n  loader: [LoaderSlotProps]\n  default: [VFieldSlot]\n}>\n\nexport const VField = genericComponent<new <T>() => {\n  $props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (val: T) => any\n  }\n  $slots: VFieldSlots\n}>()({\n  name: 'VField',\n\n  inheritAttrs: false,\n\n  props: {\n    id: String,\n\n    ...makeFocusProps(),\n    ...makeVFieldProps(),\n  },\n\n  emits: {\n    'click:clear': (e: MouseEvent) => true,\n    'click:prepend-inner': (e: MouseEvent) => true,\n    'click:append-inner': (e: MouseEvent) => true,\n    'click:control': (e: MouseEvent) => true,\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { loaderClasses } = useLoader(props)\n    const { focusClasses, isFocused, focus, blur } = useFocus(props)\n\n    const isActive = computed(() => props.dirty || props.active)\n    const hasLabel = computed(() => !props.singleLine && !!(props.label || slots.label))\n\n    const uid = getUid()\n    const id = computed(() => props.id || `input-${uid}`)\n\n    const labelRef = ref<VFieldLabel>()\n    const floatingLabelRef = ref<VFieldLabel>()\n    const controlRef = ref<HTMLElement>()\n\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'bgColor'))\n    const { textColorClasses, textColorStyles } = useTextColor(computed(() => {\n      return (\n        isActive.value &&\n        isFocused.value &&\n        !props.error &&\n        !props.disabled\n      ) ? props.color : undefined\n    }))\n\n    watch(isActive, val => {\n      if (hasLabel.value) {\n        const el: HTMLElement = labelRef.value!.$el\n        const targetEl: HTMLElement = floatingLabelRef.value!.$el\n        const rect = nullifyTransforms(el)\n        const targetRect = targetEl.getBoundingClientRect()\n\n        const x = targetRect.x - rect.x\n        const y = targetRect.y - rect.y - (rect.height / 2 - targetRect.height / 2)\n\n        const targetWidth = targetRect.width / 0.75\n        const width = Math.abs(targetWidth - rect.width) > 1\n          ? { maxWidth: convertToUnit(targetWidth) }\n          : undefined\n\n        const duration = parseFloat(getComputedStyle(el).transitionDuration) * 1000\n        const scale = parseFloat(getComputedStyle(targetEl).getPropertyValue('--v-field-label-scale'))\n\n        el.style.visibility = 'visible'\n        targetEl.style.visibility = 'hidden'\n\n        el.animate([\n          { transform: 'translate(0)' },\n          { transform: `translate(${x}px, ${y}px) scale(${scale})`, ...width },\n        ], {\n          duration,\n          easing: standardEasing,\n          direction: val ? 'normal' : 'reverse',\n        }).finished.then(() => {\n          el.style.removeProperty('visibility')\n          targetEl.style.removeProperty('visibility')\n        })\n      }\n    }, { flush: 'post' })\n\n    const slotProps = computed<DefaultInputSlot>(() => ({\n      isActive,\n      isFocused,\n      controlRef,\n      blur,\n      focus,\n    }))\n\n    function onClick (e: MouseEvent) {\n      if (e.target !== document.activeElement) {\n        e.preventDefault()\n      }\n\n      emit('click:control', e)\n    }\n\n    useRender(() => {\n      const isOutlined = props.variant === 'outlined'\n      const hasPrepend = (slots.prependInner || props.prependInnerIcon)\n      const hasClear = !!(props.clearable || slots.clear)\n      const hasAppend = !!(slots.appendInner || props.appendInnerIcon || hasClear)\n      const label = slots.label\n        ? slots.label({\n          label: props.label,\n          props: { for: id.value },\n        })\n        : props.label\n\n      return (\n        <div\n          class={[\n            'v-field',\n            {\n              'v-field--active': isActive.value,\n              'v-field--appended': hasAppend,\n              'v-field--disabled': props.disabled,\n              'v-field--dirty': props.dirty,\n              'v-field--error': props.error,\n              'v-field--has-background': !!props.bgColor,\n              'v-field--persistent-clear': props.persistentClear,\n              'v-field--prepended': hasPrepend,\n              'v-field--reverse': props.reverse,\n              'v-field--single-line': props.singleLine,\n              [`v-field--variant-${props.variant}`]: true,\n            },\n            themeClasses.value,\n            backgroundColorClasses.value,\n            focusClasses.value,\n            loaderClasses.value,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            textColorStyles.value,\n          ]}\n          onClick={ onClick }\n          { ...attrs }\n        >\n          <div class=\"v-field__overlay\" />\n\n          <LoaderSlot\n            name=\"v-field\"\n            active={ props.loading }\n            color={ props.error ? 'error' : props.color }\n            v-slots={{ default: slots.loader }}\n          />\n\n          { hasPrepend && (\n            <div\n              class=\"v-field__prepend-inner\"\n            >\n              { props.prependInnerIcon && (\n                <VIcon\n                  onClick={ (e: MouseEvent) => emit('click:prepend-inner', e) }\n                  icon={ props.prependInnerIcon }\n                />\n              ) }\n\n              { slots?.prependInner?.(slotProps.value) }\n            </div>\n          ) }\n\n          <div class=\"v-field__field\">\n            { ['contained', 'filled'].includes(props.variant) && hasLabel.value && (\n              <VFieldLabel\n                ref={ floatingLabelRef }\n                class={[textColorClasses.value]}\n                floating\n              >\n                { label }\n              </VFieldLabel>\n            ) }\n\n            <VFieldLabel ref={ labelRef } for={ id.value }>\n              { label }\n            </VFieldLabel>\n\n            { slots.default?.({\n              ...slotProps.value,\n              props: {\n                id: id.value,\n                class: 'v-field__input',\n              },\n              focus,\n              blur,\n            } as VFieldSlot) }\n          </div>\n\n          { hasClear && (\n            <VExpandXTransition>\n              <div\n                class=\"v-field__clearable\"\n                v-show={ props.dirty }\n              >\n                { slots.clear\n                  ? slots.clear()\n                  : (\n                    <VIcon\n                      onClick={ (e: MouseEvent) => emit('click:clear', e) }\n                      icon={ props.clearIcon }\n                    />\n                  )\n                }\n              </div>\n            </VExpandXTransition>\n          ) }\n\n          { hasAppend && (\n            <div\n              class=\"v-field__append-inner\"\n            >\n              { slots?.appendInner?.(slotProps.value) }\n\n              { props.appendInnerIcon && (\n                <VIcon\n                  onClick={ (e: MouseEvent) => emit('click:append-inner', e) }\n                  icon={ props.appendInnerIcon }\n                />\n              ) }\n            </div>\n          ) }\n\n          <div\n            class={[\n              'v-field__outline',\n              textColorClasses.value,\n            ]}\n          >\n            { isOutlined && (\n              <>\n                <div class=\"v-field__outline__start\" />\n\n                { hasLabel.value && (\n                  <div class=\"v-field__outline__notch\">\n                    <VFieldLabel ref={ floatingLabelRef } floating>\n                      { label }\n                    </VFieldLabel>\n                  </div>\n                ) }\n\n                <div class=\"v-field__outline__end\" />\n              </>\n            ) }\n\n            { ['plain', 'underlined'].includes(props.variant) && hasLabel.value && (\n              <VFieldLabel ref={ floatingLabelRef } floating>\n                { label }\n              </VFieldLabel>\n            ) }\n          </div>\n        </div>\n      )\n    })\n\n    return {\n      controlRef,\n    }\n  },\n})\n\nexport type VField = InstanceType<typeof VField>\n\n// TODO: this is kinda slow, might be better to implicitly inherit props instead\nexport function filterFieldProps (attrs: Record<string, unknown>) {\n  return pick(attrs, Object.keys(VField.props))\n}\n"]},"metadata":{},"sourceType":"module"}