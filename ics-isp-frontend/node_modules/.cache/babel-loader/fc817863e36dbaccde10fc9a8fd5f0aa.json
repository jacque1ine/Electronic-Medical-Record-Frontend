{"ast":null,"code":"// Utilities\nimport { computed, inject, provide, ref } from 'vue';\nimport { useProxiedModel } from \"./proxiedModel.mjs\";\nimport { consoleWarn, propsFactory } from \"../util/index.mjs\"; // Types\n\nexport const FormKey = Symbol.for('vuetify:form');\nexport const makeFormProps = propsFactory({\n  disabled: Boolean,\n  fastFail: Boolean,\n  lazyValidation: Boolean,\n  readonly: Boolean,\n  modelValue: {\n    type: Boolean,\n    default: null\n  }\n});\nexport function createForm(props) {\n  const model = useProxiedModel(props, 'modelValue');\n  const isDisabled = computed(() => props.disabled);\n  const isReadonly = computed(() => props.readonly);\n  const isValidating = ref(false);\n  const items = ref([]);\n  const errorMessages = ref([]);\n\n  async function validate() {\n    const results = [];\n    let valid = true;\n    errorMessages.value = [];\n    model.value = null;\n    isValidating.value = true;\n\n    for (const item of items.value) {\n      const itemErrorMessages = await item.validate();\n\n      if (itemErrorMessages.length > 0) {\n        valid = false;\n        results.push({\n          id: item.id,\n          errorMessages: itemErrorMessages\n        });\n      }\n\n      if (!valid && props.fastFail) break;\n    }\n\n    errorMessages.value = results;\n    model.value = valid;\n    isValidating.value = false;\n    return {\n      valid,\n      errorMessages: errorMessages.value\n    };\n  }\n\n  function reset() {\n    items.value.forEach(item => item.reset());\n    model.value = null;\n  }\n\n  function resetValidation() {\n    items.value.forEach(item => item.resetValidation());\n    errorMessages.value = [];\n    model.value = null;\n  }\n\n  provide(FormKey, {\n    register: (id, validate, reset, resetValidation) => {\n      if (items.value.some(item => item.id === id)) {\n        consoleWarn(`Duplicate input name \"${id}\"`);\n      }\n\n      items.value.push({\n        id,\n        validate,\n        reset,\n        resetValidation\n      });\n    },\n    unregister: id => {\n      items.value = items.value.filter(item => {\n        return item.id !== id;\n      });\n    },\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items\n  });\n  return {\n    errorMessages,\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items,\n    validate,\n    reset,\n    resetValidation\n  };\n}\nexport function useForm() {\n  return inject(FormKey, null);\n}","map":{"version":3,"mappings":"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","names":["computed","inject","provide","ref","useProxiedModel","consoleWarn","propsFactory","FormKey","Symbol","for","makeFormProps","disabled","Boolean","fastFail","lazyValidation","readonly","modelValue","type","default","createForm","props","model","isDisabled","isReadonly","isValidating","items","errorMessages","validate","results","valid","value","item","itemErrorMessages","length","push","id","reset","forEach","resetValidation","register","some","unregister","filter","useForm"],"sources":["../../src/composables/form.ts"],"sourcesContent":["// Utilities\nimport { computed, inject, provide, ref } from 'vue'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { consoleWarn, propsFactory } from '@/util'\n\n// Types\nimport type { ComputedRef, InjectionKey, PropType, Ref } from 'vue'\n\nexport interface FormProvide {\n  register: (\n    id: number | string,\n    validate: () => Promise<string[]>,\n    reset: () => void,\n    resetValidation: () => void\n  ) => void\n  unregister: (id: number | string) => void\n  items: Ref<FormField[]>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isValidating: Ref<boolean>\n}\n\ninterface FormField {\n  id: number | string\n  validate: () => Promise<string[]>\n  reset: () => void\n  resetValidation: () => void\n}\n\ninterface FormValidationResult {\n  id: number | string\n  errorMessages: string[]\n}\n\nexport const FormKey: InjectionKey<FormProvide> = Symbol.for('vuetify:form')\n\nexport interface FormProps {\n  disabled: boolean\n  fastFail: boolean\n  lazyValidation: boolean\n  readonly: boolean\n  modelValue: boolean | null\n  'onUpdate:modelValue': ((val: boolean | null) => void) | undefined\n}\n\nexport const makeFormProps = propsFactory({\n  disabled: Boolean,\n  fastFail: Boolean,\n  lazyValidation: Boolean,\n  readonly: Boolean,\n  modelValue: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n})\n\nexport function createForm (props: FormProps) {\n  const model = useProxiedModel(props, 'modelValue')\n\n  const isDisabled = computed(() => props.disabled)\n  const isReadonly = computed(() => props.readonly)\n  const isValidating = ref(false)\n  const items = ref<FormField[]>([])\n  const errorMessages = ref<FormValidationResult[]>([])\n\n  async function validate () {\n    const results = []\n    let valid = true\n\n    errorMessages.value = []\n    model.value = null\n    isValidating.value = true\n\n    for (const item of items.value) {\n      const itemErrorMessages = await item.validate()\n\n      if (itemErrorMessages.length > 0) {\n        valid = false\n\n        results.push({\n          id: item.id,\n          errorMessages: itemErrorMessages,\n        })\n      }\n\n      if (!valid && props.fastFail) break\n    }\n\n    errorMessages.value = results\n    model.value = valid\n    isValidating.value = false\n\n    return { valid, errorMessages: errorMessages.value }\n  }\n\n  function reset () {\n    items.value.forEach(item => item.reset())\n    model.value = null\n  }\n\n  function resetValidation () {\n    items.value.forEach(item => item.resetValidation())\n    errorMessages.value = []\n    model.value = null\n  }\n\n  provide(FormKey, {\n    register: (id, validate, reset, resetValidation) => {\n      if (items.value.some(item => item.id === id)) {\n        consoleWarn(`Duplicate input name \"${id}\"`)\n      }\n\n      items.value.push({\n        id,\n        validate,\n        reset,\n        resetValidation,\n      })\n    },\n    unregister: id => {\n      items.value = items.value.filter(item => {\n        return item.id !== id\n      })\n    },\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items,\n  })\n\n  return {\n    errorMessages,\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items,\n    validate,\n    reset,\n    resetValidation,\n  }\n}\n\nexport function useForm () {\n  return inject(FormKey, null)\n}\n"]},"metadata":{},"sourceType":"module"}