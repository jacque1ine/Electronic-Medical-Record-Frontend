{"ast":null,"code":"// Utilities\nimport { onBeforeUnmount, readonly, ref, watch } from 'vue'; // Globals\n\nimport { IN_BROWSER } from \"../util/globals.mjs\";\nexport function useResizeObserver(callback) {\n  const resizeRef = ref();\n  const contentRect = ref();\n\n  if (IN_BROWSER) {\n    const observer = new ResizeObserver(entries => {\n      callback == null ? void 0 : callback(entries, observer);\n      if (!entries.length) return;\n      contentRect.value = entries[0].contentRect;\n    });\n    onBeforeUnmount(() => {\n      observer.disconnect();\n    });\n    watch(resizeRef, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue);\n        contentRect.value = undefined;\n      }\n\n      if (newValue) observer.observe(newValue);\n    }, {\n      flush: 'post'\n    });\n  }\n\n  return {\n    resizeRef,\n    contentRect: readonly(contentRect)\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,eAAT,EAA0BC,QAA1B,EAAoCC,GAApC,EAAyCC,KAAzC,QAAsD,KAAtD,C,CAGA;;SACSC,kB;AAOT,OAAO,SAASC,iBAAT,CAA4BC,QAA5B,EAA4E;EACjF,MAAMC,SAAS,GAAGL,GAAG,EAArB;EACA,MAAMM,WAAW,GAAGN,GAAG,EAAvB;;EAEA,IAAIE,UAAJ,EAAgB;IACd,MAAMK,QAAQ,GAAG,IAAIC,cAAJ,CAAoBC,OAAD,IAAoC;MACtEL,QAAQ,QAARA,oBAAQ,CAAGK,OAAH,EAAYF,QAAZ,CAARH;MAEA,IAAI,CAACK,OAAO,CAACC,MAAb,EAAqB;MAErBJ,WAAW,CAACK,KAAZL,GAAoBG,OAAO,CAAC,CAAD,CAAPA,CAAWH,WAA/BA;IALe,EAAjB;IAQAR,eAAe,CAAC,MAAM;MACpBS,QAAQ,CAACK,UAATL;IADa,EAAfT;IAIAG,KAAK,CAACI,SAAD,EAAY,CAACQ,QAAD,EAAWC,QAAX,KAAwB;MACvC,IAAIA,QAAJ,EAAc;QACZP,QAAQ,CAACQ,SAATR,CAAmBO,QAAnBP;QACAD,WAAW,CAACK,KAAZL,GAAoBU,SAApBV;MACD;;MAED,IAAIO,QAAJ,EAAcN,QAAQ,CAACU,OAATV,CAAiBM,QAAjBN;IANX,GAOF;MACDW,KAAK,EAAE;IADN,CAPE,CAALjB;EAUD;;EAED,OAAO;IACLI,SADK;IAELC,WAAW,EAAEP,QAAQ,CAACO,WAAD;EAFhB,CAAP;AAID","names":["onBeforeUnmount","readonly","ref","watch","IN_BROWSER","useResizeObserver","callback","resizeRef","contentRect","observer","ResizeObserver","entries","length","value","disconnect","newValue","oldValue","unobserve","undefined","observe","flush"],"sources":["../../src/composables/resizeObserver.ts"],"sourcesContent":["// Utilities\nimport { onBeforeUnmount, readonly, ref, watch } from 'vue'\nimport type { DeepReadonly, Ref } from 'vue'\n\n// Globals\nimport { IN_BROWSER } from '@/util/globals'\n\ninterface ResizeState {\n  resizeRef: Ref<Element | undefined>\n  contentRect: DeepReadonly<Ref<DOMRectReadOnly | undefined>>\n}\n\nexport function useResizeObserver (callback?: ResizeObserverCallback): ResizeState {\n  const resizeRef = ref<Element>()\n  const contentRect = ref<DOMRectReadOnly>()\n\n  if (IN_BROWSER) {\n    const observer = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n      callback?.(entries, observer)\n\n      if (!entries.length) return\n\n      contentRect.value = entries[0].contentRect\n    })\n\n    onBeforeUnmount(() => {\n      observer.disconnect()\n    })\n\n    watch(resizeRef, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue)\n        contentRect.value = undefined\n      }\n\n      if (newValue) observer.observe(newValue)\n    }, {\n      flush: 'post',\n    })\n  }\n\n  return {\n    resizeRef,\n    contentRect: readonly(contentRect),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}